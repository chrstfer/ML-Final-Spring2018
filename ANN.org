# -*- org-confirm-babel-evaluate: nil; -*-
#+AUTHOR: Chris Carrigan Brolly
#+TITLE: Artificial Neural Nets 
#+HTML_HEAD: <link href="http://gongzhitaao.org/orgcss/org.css" rel="stylesheet" type="text/css" />
#+PROPERTY: header-args :session ANNimpl

* Setup
** R Setup  
*** Libraries
#+BEGIN_SRC R :results none
library(sigmoid)
#+END_SRC
*** Functions
  #+BEGIN_SRC R :results none :export source
    getLabels <- function(lbldb, nget=0) {
	magic  <- readBin(lbldb, what="integer", n=1, endian="big", size=4)
	if(magic != 2049)
	    return(NULL)
	n.lbls    <- readBin(lbldb, what="integer", n=1,    endian="big", size=4)
	if(nget==0)
	    nget=n.lbls

	labels <- readBin(lbldb, what="integer", n=nget, endian="big",  size=1)

	close(lbldb)
	return(labels)
    }

    getImages <- function(imgdb, nget=0, progress=FALSE) {
	magic  <- readBin(imgdb, what="integer", n=1, endian="big", size=4)
	## if(magic != 2049)
	##     return(NULL)

	n.imgs <- readBin(imgdb, what="integer", n=1, endian="big", size=4)
	if(nget==0)
	    nget <- n.imgs # trunc(sqrt(n.imgs))

	n.rows <- readBin(imgdb, what="integer", n=1, endian="big", size=4)
	n.cols <- readBin(imgdb, what="integer", n=1, endian="big", size=4)

	print(gettextf("Getting %d %dx%d Images", nget, n.rows, n.cols))

	images <- c()
	for(i in 1:nget) {
	    .img   <- matrix(readBin(imgdb, what="integer", n=n.rows*n.cols, endian="big", size=1), nrow=n.rows, ncol=n.cols)
	    images <-  c(images, list(.img))
	    if(progress && i %% trunc(sqrt(nget)) == 0) 
		print(gettextf("%2.2f%%", round((100*i)/nget, digits=2)))
	}
	close(imgdb)
	return(images)
    }
  #+END_SRC



** Data Setup
*** Data (Links)
  |---------------------+----------+-------------------------------------------------------------|
  | ID                  | size (b) | Link                                                        |
  |---------------------+----------+-------------------------------------------------------------|
  | training set images |  9912422 | http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz |
  | training set labels |    28881 | http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz |
  | test set images     |  1648877 | http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz  |
  | test set labels     |     4542 | http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz  |
  |---------------------+----------+-------------------------------------------------------------|

*** Data (import)
  tr.files.imgs <- "datasets/training/images"
  tr.files.lbls <- "datasets/training/labels"
  ts.files.imgs <- "datasets/testing/images"
  ts.files.lbls <- "datasets/testing/labels" 


#+BEGIN_SRC R :results output graphics :file imgs/setup/ex1.png
  ## Works
  tr.labels <- as.vector(getLabels(gzfile("datasets/training/labels", "rb"), nget=256))
  tr.images <- getImages(gzfile("datasets/training/images", # data's filename
				"rb"), # read it as binary
			 ## Get 256 of the entries
			 nget=256, progress=TRUE)
  tr.im.matrix <- do.call("rbind", # create rows out of the input data
			  lapply(tr.images, as.vector)) # transform each image
							# matrix into a vector

  tr.df <- cbind(tr.im.matrix, tr.labels) # now create a data frame

  oldpar <- par(mar=rep(0,4))
  image(tr.images[[8]], useRaster=TRUE, col=seq(2^8)) 
  par(oldpar)

#+END_SRC

#+RESULTS:
[[file:imgs/setup/ex1.png]]


#+BEGIN_SRC R :results table drawer :colnames yes
  table(Labels=tr.df[,ncol(tr.df)])
  ## sprintf("Row x Col: %d x %d", nrow(tr.df), ncol(tr.df))
#+END_SRC

#+RESULTS:
:RESULTS:
| Labels | Freq |
|--------+------|
|      0 |   30 |
|      1 |   35 |
|      2 |   25 |
|      3 |   30 |
|      4 |   24 |
|      5 |   17 |
|      6 |   24 |
|      7 |   26 |
|      8 |   19 |
|      9 |   26 |
:END:


* Implementation: Multilayer Perceptron with Backprop
  - TODO ::
    - function to apply an input and get an output
      - function to run layer
      - 
** Layers Class
#+BEGIN_SRC R 
  ##
  ## WX = A
  ##

  summary.layers <- function(layers) {
      lapply(X=layers, summary)
  }
  summary.layer <- function(layer) {
      print(layer$nodes)
      print(layer$weights)
  }


  layers.do_layer <- function(k,model,sig=model$sigmoid) {
    
    
      return(sig(prod))
  }


  ## ideally what will become predict.modelann
  model.do_model <- function() {
    
  }

  ## args :: input - 
  model.gen.annc <- function(length.input,
			     length.hidden,
			     length.output,
			     out.classes=as.factor(1:length.output),
			     input=c(0,0)) {
      model <- list()
      class(model) <- "model.ann.classifier"
   
      lengths <- c(length.input,
		   length.hidden,
		   length.output)
      print(lengths)
      n.layers <- length(lengths)

      layers.gen_nodes <- function()
	  return(lapply(1:n.layers,
			function(n)
			    matrix(nrow=lengths[n],
				   ncol=1,data=rep(0,lengths[n]))))
    
      layers.gen_weights <- function(layers.nodes=model[["nodes"]])
	  return(lapply(2:length(layers.nodes), function(k) {
	      .c <- length(layers.nodes[[k]])
	      .r <- length(layers.nodes[[k-1]])
	      print(paste("K: ",k))
	      print(.c)
	      print(.r)
	      return(matrix(rnorm(.r*.c),
			    ncol=.c,
			    nrow=.r))
	  }))
    
      print(paste("Input Length:",     length.input))
      print(paste("Number of Layers:", n.layers))
      print(paste("Layer Lengths:",    toString(lengths)))
      print(paste("Output Length:",    length.output))

      model$nodes <- layers.gen_nodes()
      model$weights <- c(0,layers.gen_weights(model[["nodes"]]))
    
      model$sigmoid <- sigmoid

      model$input <- input
    
      return(model)
  }

  ## basic layout, 4 layers of 5x1
  test.input <- tr.df[1,-ncol(tr.df)]
  model <- model.gen.annc(layerlens=c(5, 4, 4),
			  input=test.input,
			  out.classes=as.factor(1:10))


  mids <- list()

  for(k in 1:len) {
      mids[k+1]  <- layers.do_layer(model$hlayers[[k]], mids[k])
  }
  output <- layers.do_layer(model$olayer, mids[len])
#+END_SRC


** Model


* Analysis
#+BEGIN_SRC R
 
#+END_SRC

* Conclusion



* Sources
** Biblio
   These I read in the process of completing this project. In places where
   specific citations could be made, I have places them and linked here. 

- https://journal.r-project.org/archive/2010-1/RJournal_2010-1_Guenther+Fritsch.pdf
- https://en.wikipedia.org/wiki/Perceptron
- https://cran.r-project.org/web/packages/sigmoid/sigmoid.pdf
